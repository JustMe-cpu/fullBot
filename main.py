import asyncio
import logging
import sqlite3
import os
import random
from aiogram import Bot, Dispatcher, types, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from dotenv import load_dotenv
from aiogram.types import FSInputFile
from parsers import fetch_currency, fetch_weather, fetch_joke, fetch_movies
from keyboards import main_keyboard, image_menu, joke_menu

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

logging.basicConfig(level=logging.INFO)

DB_NAME = os.getenv("DB_NAME")

conn = sqlite3.connect(DB_NAME)
cursor = conn.cursor()


cursor.execute("DROP TABLE IF EXISTS survey")

cursor.execute('''
CREATE TABLE survey (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    tg_id INTEGER,
    name TEXT,
    age INTEGER,
    subject TEXT,
    color TEXT,
    movie TEXT,
    q6 TEXT,
    q7 TEXT,
    q8 TEXT
)
''')

conn.commit()
@router.message(Command("start"))
async def start_handler(message: types.Message):
    user_name = message.from_user.first_name
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

class Survey(StatesGroup):
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()
    q5 = State()
    q6 = State()
    q7 = State()
    q8 = State()


@router.message(lambda message: message.text.lower() == "–æ–ø—Ä–æ—Å")
async def start_survey(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await state.update_data(user_id=user_id, tg_id=message.from_user.id)
    cursor.execute("SELECT * FROM survey WHERE tg_id = ?", (message.from_user.id,))
    existing_data = cursor.fetchone()
    if existing_data:
        result_text = (
            f"üìä *–í–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã:*\n"
            f"1Ô∏è‚É£ –ò–º—è: {existing_data[3]}\n"
            f"2Ô∏è‚É£ –í–æ–∑—Ä–∞—Å—Ç: {existing_data[4]}\n"
            f"3Ô∏è‚É£ –õ—é–±–∏–º—ã–π –ø—Ä–µ–¥–º–µ—Ç: {existing_data[5]}\n"
            f"4Ô∏è‚É£ –õ—é–±–∏–º—ã–π —Ü–≤–µ—Ç: {existing_data[6]}\n"
            f"5Ô∏è‚É£ –õ—é–±–∏–º—ã–π —Ñ–∏–ª—å–º: {existing_data[7]}\n"
            f"6Ô∏è‚É£ {existing_data[8]}\n"
            f"7Ô∏è‚É£ {existing_data[9]}\n"
            f"8Ô∏è‚É£ {existing_data[10]}"
        )
        await message.answer("–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–ø—Ä–æ—Å! –í–æ—Ç –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:")
        await message.answer(result_text, parse_mode="Markdown")
        return
    await message.answer("1) –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(Survey.q1)

@router.message(Survey.q1)
async def survey_q1(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("2) –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    await state.set_state(Survey.q2)

@router.message(Survey.q2)
async def survey_q2(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer("3) –ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —à–∫–æ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç?")
    await state.set_state(Survey.q3)

@router.message(Survey.q3)
async def survey_q3(message: types.Message, state: FSMContext):
    await state.update_data(subject=message.text)
    await message.answer("4) –ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç?")
    await state.set_state(Survey.q4)

@router.message(Survey.q4)
async def survey_q4(message: types.Message, state: FSMContext):
    await state.update_data(color=message.text)
    await message.answer("5) –ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º?")
    await state.set_state(Survey.q5)

@router.message(Survey.q5)
async def survey_q5(message: types.Message, state: FSMContext):
    await state.update_data(movie=message.text)
    await message.answer("6) –í–æ–ø—Ä–æ—Å –Ω–∞ –≤–∞—à–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ:")
    await state.set_state(Survey.q6)

@router.message(Survey.q6)
async def survey_q6(message: types.Message, state: FSMContext):
    await state.update_data(q6=message.text)
    await message.answer("7) –ï—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(Survey.q7)

@router.message(Survey.q7)
async def survey_q7(message: types.Message, state: FSMContext):
    await state.update_data(q7=message.text)
    await message.answer("8) –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(Survey.q8)

@router.message(Survey.q8)
async def survey_q8(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cursor.execute('''
        INSERT INTO survey (user_id, tg_id, name, age, subject, color, movie, q6, q7, q8)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (data['user_id'], data['tg_id'], data['name'], data['age'], data['subject'],
          data['color'], data['movie'], data['q6'], data['q7'], message.text))
    conn.commit()

    data = await state.get_data()

    result_text = (
        f"üìä *–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:*\n"
        f"1Ô∏è‚É£ –ò–º—è: {data['name']}\n"
        f"2Ô∏è‚É£ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"3Ô∏è‚É£ –õ—é–±–∏–º—ã–π –ø—Ä–µ–¥–º–µ—Ç: {data['subject']}\n"
        f"4Ô∏è‚É£ –õ—é–±–∏–º—ã–π —Ü–≤–µ—Ç: {data['color']}\n"
        f"5Ô∏è‚É£ –õ—é–±–∏–º—ã–π —Ñ–∏–ª—å–º: {data['movie']}\n"
        f"6Ô∏è‚É£ {data['q6']}\n"
        f"7Ô∏è‚É£ {data['q7']}\n"
        f"8Ô∏è‚É£ {message.text}"
    )

    await message.answer(result_text, parse_mode="Markdown")
    await state.clear()

@router.message()
async def menu_handler(message: types.Message):
    text = message.text.lower()
    if text == "—à—É—Ç–∫–∞":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —à—É—Ç–æ–∫:", reply_markup=joke_menu())
    elif text == "–ø–æ–≥–æ–¥–∞":
        weather = await fetch_weather()
        await message.answer(weather)
    elif text == "–∫—É—Ä—Å –≤–∞–ª—é—Ç":
        currency_data = await fetch_currency()
        if currency_data.strip():
            await message.answer(currency_data)
    elif text == "—Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤":
        movies = await fetch_movies()
        await message.answer(movies)
    elif text == "–æ–ø—Ä–æ—Å":
        await message.answer("–ù–∞—á–Ω–µ–º –æ–ø—Ä–æ—Å! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    elif text == "–∫–∞—Ä—Ç–∏–Ω–∫–∞":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=image_menu())

@router.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    data = callback.data

    if data.startswith("joke_"):
        category = data.split("_")[1]
        joke = await fetch_joke(category)
        await callback.message.answer(joke)
    elif data.startswith("image_"):
        category = data.split("_")[1]
        images = await get_random_images(category)

        if images:
            img_path = random.choice(images)  # –ë–µ—Ä—ë–º 1 —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
            photo = FSInputFile(img_path)
            await bot.send_photo(callback.message.chat.id, photo)
        else:
            await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ.")

        await callback.answer()

    elif data.startswith("weather_"):
        day = int(data.split("_")[1])
        weather_data = await fetch_weather()
        await callback.message.answer(weather_data)
        await callback.answer()

    await callback.answer()

async def get_random_images(category: str):
    folder_path = f"images/{category}/"
    images = [img for img in os.listdir(folder_path) if img.endswith((".jpg", ".png"))]
    random_images = random.sample(images, min(1, len(images)))
    return [folder_path + img for img in random_images]

dp.include_router(router)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

